AWSTemplateFormatVersion: '2010-09-09'

Description: Discourse Discussion Forum Deployment to EC2 and Docker

#----------------------------------------------------------------------
# Work in Progress
#  * Current focus:
#    * S3 buckets for backup and file uploads
#    * EC2 instance profile and supporting role for Discourse VM to
#      work with S3.
#  * Future:
#    * EC2 provisioning with:
#      * VM
#      * Initial boot scripts to install dependencies
#      * Copy/deploy app.yml
#      * Build out Discourse image and launch container instance
#    * Pull pre-built container image from ECR
#      * Predicated on CD pipeline to build, validate and publish image
#        to ECR
#----------------------------------------------------------------------
        
Parameters:
  pBizScope:
    Type: String
    Description: Used to qualify resource names
    Default: foobar
  
  pSystem:
    Type: String
    Description: Used to qualify resource names
    Default: discourse

  pApp:
    Type: String
    Description: Used to qualify resource names
    Default: sample
  
  pAppEnvPurpose:
    Type: String
    Description: Used to qualify resource names. 10 characters max.
    AllowedPattern: '^[a-zA-Z0-9-_]{1,10}$'
    Default: dev

  # Ideally, the VPC and subnet IDs could be either imported from
  # an exported CFN variable or obtained dynamically through some
  # other means.
  pVpcId:
    Description: ID of the existing VPC
    Type: String
    Default: vpc-12345678

  pAlbSubnetId1:
    Description: Target subnet 1 for ALB
    Type: String
    Default: subnet-12345678

  pAlbSubnetId2:
    Description: Target subnet 2 for ALB
    Type: String
    Default: subnet-12345678

  pAppSubnetId1:
    Description: Target subnet 1 for app
    Type: String
    Default: subnet-12345678

  pAppSubnetId2:
    Description: Target subnet 2 for app
    Type: String
    Default: subnet-12345678

  pAlbScheme:
    Description: ALB Scheme
    Type: String
    Default: internal
    AllowedValues:
    - internal
    - internet-facing

  pAlbIngressCidrIp:
    Description: IP address range that can be used to access the ALB
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # Initially, we'll keep the server count to 1 because supporting more than 
  # 1 EC2/Docker container instance of Discourse will require us to split
  # out not only the RDBMS, but also Redis. Which is doable, but just not
  # a high priority at this time.
  pServerCount:
    Description: Number of Amazon EC2 instances to launch for the web server
    Type: Number
    Default: '1'

  pInstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: must be a valid EC2 instance type.

Mappings:
  mAWSInstanceType2Arch:
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64

  mAWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-0c6b1d09930fac512
    us-west-1:
      HVM64: ami-015954d5e5548d13b
    us-west-2:
      HVM64: ami-0cb72367e98845d43 

Resources:

  rDiscourseBackupsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${pBizScope}-${pSystem}-${pApp}-backups-${pAppEnvPurpose}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  rDiscourseUploadsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${pBizScope}-${pSystem}-${pApp}-uploads-${pAppEnvPurpose}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  rAlb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${pSystem}-${pApp}-${pAppEnvPurpose}'
      Scheme: !Ref pAlbScheme
      SecurityGroups:
        - !Ref rAlbSecurityGroup
      Subnets:
        - !Ref pAlbSubnetId1
        - !Ref pAlbSubnetId2

  rAlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pSystem}-${pApp}-alb-${pAppEnvPurpose}'
      GroupDescription: HTTP Access from any location
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref pAlbIngressCidrIp
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref pAlbIngressCidrIp
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref pVpcId

  rHttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref rAlb
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref rTargetGroup

# To Do: Once HTTPS is enabled, we'll want to redirect HTTP traffic to
# 443 by using this form of the HTTP listener vs fwding port 80 traffic
# to the backend.

#  rHttpListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref rAlb
#      Port: 80
#      Protocol: HTTP
#      DefaultActions:
#        - RedirectConfig:
#            Host: '#{host}'
#            Path: '/#{path}'
#            Port: '443'
#            Protocol: HTTPS
#            StatusCode: HTTP_302
#          Type: redirect

#  To Do: Obtain proper certificate adn associate with this listener.
#  Presumably, this would the standard wildcard cert.
#
#  Also need to add code to associated a custom FQDN with the IP address
#  of the load balancer so that the certifacte will work properly.

#  rHttpsListener:
#    Type: AWS::ElasticLoadBalancingV2::Listener
#    Properties:
#      LoadBalancerArn: !Ref rAlb
#      Port: 443
#      Protocol: HTTPS
#      DefaultActions:
#        - Type: forward
#          TargetGroupArn: !Ref rTargetGroup

  rTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${pSystem}-${pApp}-${pAppEnvPurpose}'
      VpcId: !Ref pVpcId
      HealthCheckIntervalSeconds: 15
      HealthCheckTimeoutSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299

  rAsg:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub '${pSystem}-${pApp}-${pAppEnvPurpose}'
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: !Ref pServerCount
      VPCZoneIdentifier:
        - !Ref pAppSubnetId1
        - !Ref pAppSubnetId2
      TargetGroupARNs:
        - !Ref rTargetGroup
      LaunchConfigurationName: !Ref rLaunchConfig
      Tags:
        - Key: Name
          Value: !Sub '${pSystem}-${pApp}-${pAppEnvPurpose}'
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Count: !Ref pServerCount
        Timeout: PT10M

  rInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${pSystem}-${pApp}-ec2-${pAppEnvPurpose}'
      VpcId: !Ref pVpcId
      GroupDescription: Allow access via HTTP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref rAlbSecurityGroup

  rLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: !Sub '${pSystem}-${pApp}-${pAppEnvPurpose}'
      InstanceType: !Ref pInstanceType
      ImageId: !FindInMap 
        - mAWSRegionArch2AMI
        - !Ref AWS::Region
        - !FindInMap 
          - mAWSInstanceType2Arch
          - !Ref pInstanceType
          - Arch
      IamInstanceProfile: !Ref rInstanceProfile
      SecurityGroups:
        - !Ref rInstanceSecurityGroup
      AssociatePublicIpAddress: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum install -y aws-cfn-bootstrap
              
          /opt/aws/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource rLaunchConfig \
              --configsets All \
              --region ${AWS::Region}
              
          /opt/aws/bin/cfn-signal -e $? \
              --stack ${AWS::StackName} \
              --resource rAsg \
              --region ${AWS::Region}

    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureCloudWatchMetrics
            - ConfigureCloudWatchLogsAgent
            - ConfigureDiscourse
        ConfigureCloudWatchMetrics:
          packages:
            yum:
              perl-Switch: []
              perl-DateTime: []
              perl-Sys-Syslog: []
              perl-LWP-Protocol-https: []
              perl-Digest-SHA.x86_64: []
          sources:
            /home/ec2-user: >-
              https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.2.zip
          files:
            /home/ec2-user/crontab:
              content: !Sub |
                */1 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --aws-iam-role=${rRole} --mem-used --memory-units=megabytes --mem-util --disk-space-util --disk-space-used --disk-space-avail --disk-path=/
              mode: '000600'
              owner: ec2-user
              group: ec2-user
          commands:
            01_YumUpdateMonitoring:
              command: yum update -y
            02_MonitoringCron:
              command: >-
                chmod +x /home/ec2-user/aws-scripts-mon/*.pl && crontab -u
                ec2-user /home/ec2-user/crontab && rm /home/ec2-user/crontab
        ConfigureCloudWatchLogsAgent:
          packages:
            yum:
              awslogs: []
          files:
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file= /var/awslogs/state/agent-state

                [/var/log/cloud-init.log]
                file = /var/log/cloud-init.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cloud-init.log
                datetime_format =

                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_group_name = ${rCloudWatchLogsAgentGroup} 
                log_stream_name = {instance_id}/cloud-init-output.log
                datetime_format = 

                [/var/log/cfn-init.log]
                file = /var/log/cfn-init.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-init.log
                datetime_format = 

                [/var/log/cfn-wire.log]
                file = /var/log/cfn-wire.log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/cfn-wire.log
                datetime_format = 

                # Discourse logs can be found on the host OS at:
                # /var/discourse/shared/standalone/log/
                #   rails/ - web application logs
                #   var-log/ - nginx, redis, postgresgl
                # We'll want to capture the rails/ and
                # var-log/nginx/ logs to CloudWatch Logs.
                #
                # The following example Apache HTTP Server
                # logs will be replaced by the Discourse
                # logs of interest.

                [/var/log/httpd/access_log]
                file = /var/log/httpd/access_log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/apache_access_log
                datetime_format = 

                [/var/log/httpd/error_log]
                file = /var/log/httpd/error_log
                log_group_name = ${rCloudWatchLogsAgentGroup}
                log_stream_name = {instance_id}/apache_error_log
                datetime_format = 
              mode: '000444'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
              mode: '000444'
              owner: root
              group: root
          commands:
            create-awslogs-state-file:
              command: 'mkdir -p /var/awslogs/state'
            enable-awslogsd:
              command: 'systemctl enable awslogsd.service'
            start-awslogsd:
              command: 'systemctl start awslogsd'
        ConfigureDiscourse:
          packages:
            yum:
              httpd: []
          files:
            /var/www/html/index.html:
              content: |
                <h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>
              mode: '000644'
              owner: root
              group: root
          commands:
            modify-index-html:
              command: 'echo "<p>Served from $(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)" >> /var/www/html/index.html'
            enable-httpd:
              command: 'systemctl enable httpd.service'
            start-httpd:
              command: 'systemctl start httpd'

  rCloudWatchLogsAgentGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '/${pSystem}/${pApp}/ec2/${pAppEnvPurpose}'
      RetentionInDays: 1

  rRole: 
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${pBizScope}-${pSystem}-${pApp}-svc-ec2-${pAppEnvPurpose}' 
      Path: !Sub '/${pBizScope}/${pSystem}/${pApp}/'
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - 
            Effect: Allow
            Principal: 
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

  rPolicy: 
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${pBizScope}-${pSystem}-${pApp}-s3_access-${pAppEnvPurpose}'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
              - s3:PutObject
            Resource:
              - !GetAtt rDiscourseBackupsBucket.Arn
              - !GetAtt rDiscourseUploadsBucket.Arn
      Roles: 
        - Ref: rRole

  rInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub '${pBizScope}-${pSystem}-${pApp}-${pAppEnvPurpose}'
      Path: !Sub '/${pBizScope}/${pSystem}/${pApp}/'
      Roles:
        - !Ref rRole
